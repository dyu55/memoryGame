Memory Matching Game - EECS1720 Final Project1) Project Overview      This project is a memory matching game created using Java and the Swing GUI toolkit. The goal of the game is for the player to find all matching pairs of cards by flipping two cards per turn. The game supports multiple visual themes (animals, colors, flowers) and two difficulty levels: easy (unlimited moves) and hard (20-move limit). The interface is fully interactive and responds to both mouse and keyboard input.      The project uses core Java features such as Swing for the user interface, AWT for drawing the cards, MouseListener and KeyListener for input handling, and ImageIO to load external images based on the selected theme.2) Game Instructions       When the game starts, a configuration window appears. The player must choose a theme and a difficulty mode. There are three themes to choose from: Animals, Colors, and Flowers. Each theme changes the front-facing images of the cards. The player must also select between Easy mode and Hard mode. In Easy mode, there is no move limit. In Hard mode, the player is allowed 20 moves (a move is defined as flipping two cards), and the remaining move count is shown in the window title bar.      Once the player clicks the "Start Game" button, the main game window launches. The board consists of a grid of cards, all starting face down. Clicking a card flips it over to reveal its image. In each turn, the player can flip two cards. If the images match, the cards remain face up. If not, they are flipped back down after a short delay. While two cards are revealed or during the flipping delay, other clicks are disabled.      In Hard mode, the player must complete all matches within 20 moves. The move counter is updated with each turn. If the move limit is reached before completing the game, a popup informs the player and offers a choice to restart or exit. If the player successfully matches all cards, a winning message appears with the same options.      The player may also press the "Reset Game" button or use the R key at any time to return to the configuration screen and start a new game with different choices.3) Class StructureThis game uses multiple Java classes to separate responsibilities:a) Card: represents individual cards on the board, holding values, flip status, matched status, and image resources.b) Deck: generates 10 pairs of cards and shuffles them. The deck is theme-dependent.c) Game: contains the main logic for card selection, matching checks, move tracking, and win/lose conditions.d) BoardPanel: is a custom JPanel that draws the game board and processes mouse input for flipping cards.e) MemoryGameGUI: serves as the main game window, managing layout, control buttons, and interaction.f) GameConfigSelector: appears first and lets players choose game options before starting.4) Input Handling       The game supports multiple forms of user input. Players can click on any face-down card to flip it, which is handled through mouse events in the board panel. Buttons such as “Start Game” and “Reset Game” are controlled using action listeners, allowing players to begin or restart the game at any time. Additionally, the R key provides a quick keyboard shortcut to reset the game from within the main game window. After a win or lose, the game displays a dialog window prompting the user to either play again or exit.5) How to Run      To run the game, open the project in IntelliJ IDEA (or any Java IDE), and run the GameConfigSelector.java file. This will launch the configuration screen where you can select a theme and difficulty before starting the game.6) Game Inspiration      This game was inspired by classic memory matching games often found in children's card sets or mobile apps. The idea was to create a simple but engaging game that tests the player’s memory and attention to detail. We wanted to make it visually fun by including multiple image themes, and more challenging with an optional hard mode. By using Java and Swing, we were able to build everything from scratch and apply what we learned about event-driven programming, graphics, and user interaction.7) Image references      All card and cover images used in this project were sourced from Pixabay (https://pixabay.com/ ), a free image platform that allows personal and academic use with no attribution required. The images were used to visually represent cards for the three game themes: Animals, Colors, and Flowers. Each theme includes 10 pairs of images. The background image was also obtained from the same source.8) Responsibility DistributionZhihan Guo1)Wrote the full README documentation.2)Created the UML diagram based on the program structure and class relationships.3)Searched for and selected theme images (animals, flowers, colors) from Pixabay.Dongling Yu1)Designed and implemented all Java classes including core logic (Card, Deck, Game).2)Built the graphical interface (BoardPanel, MemoryGameGUI, GameConfigSelector).3)Handled game interaction logic, user input, and event handling.Aanya Joshi1)Tried to help add and organize game image resources.